# Docker Compose untuk Production Environment
version: '3.8'

services:
  # Nginx Web Server
  nginx-production:
    image: nginx:alpine
    container_name: nginx-production
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./:/var/www/html
      - ./docker/nginx/production.conf:/etc/nginx/conf.d/default.conf
      - ./docker/ssl:/etc/nginx/ssl
    depends_on:
      - php-fpm
    networks:
      - production-network
    restart: unless-stopped

  # PHP-FPM
  php-fpm:
    build:
      context: .
      dockerfile: docker/php/Dockerfile
      target: production
    container_name: php-fpm-production
    volumes:
      - ./:/var/www/html
      - ./docker/php/php.production.ini:/usr/local/etc/php/php.ini
    depends_on:
      - mysql-production
      - redis-production
    networks:
      - production-network
    restart: unless-stopped
    environment:
      - CI_ENVIRONMENT=production

  # MySQL Database
  mysql-production:
    image: mysql:8.0
    container_name: mysql-production
    ports:
      - "3306:3306"
    volumes:
      - mysql-production-data:/var/lib/mysql
      - ./docker/mysql/init:/docker-entrypoint-initdb.d
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
      MYSQL_DATABASE: ${DB_DATABASE}
      MYSQL_USER: ${DB_USERNAME}
      MYSQL_PASSWORD: ${DB_PASSWORD}
    networks:
      - production-network
    restart: unless-stopped
    command: --default-authentication-plugin=mysql_native_password

  # Redis Cache
  redis-production:
    image: redis:alpine
    container_name: redis-production
    ports:
      - "6379:6379"
    volumes:
      - redis-production-data:/data
    networks:
      - production-network
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}

volumes:
  mysql-production-data:
  redis-production-data:

networks:
  production-network:
    driver: bridge
