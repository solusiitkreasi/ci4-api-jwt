# Docker Compose untuk Staging Environment
version: '3.8'

services:
  # Nginx Web Server
  nginx-staging:
    image: nginx:alpine
    container_name: nginx-staging
    ports:
      - "8080:80"  # Port berbeda dari production
    volumes:
      - ./:/var/www/html
      - ./docker/nginx/staging.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - php-fpm-staging
    networks:
      - staging-network
    restart: unless-stopped

  # PHP-FPM
  php-fpm-staging:
    build:
      context: .
      dockerfile: docker/php/Dockerfile
      target: development
    container_name: php-fpm-staging
    volumes:
      - ./:/var/www/html
      - ./docker/php/php.development.ini:/usr/local/etc/php/php.ini
    depends_on:
      - mysql-staging
      - redis-staging
    networks:
      - staging-network
    restart: unless-stopped
    environment:
      - CI_ENVIRONMENT=development

  # MySQL Database
  mysql-staging:
    image: mysql:8.0
    container_name: mysql-staging
    ports:
      - "3307:3306"  # Port berbeda dari production
    volumes:
      - mysql-staging-data:/var/lib/mysql
      - ./docker/mysql/init:/docker-entrypoint-initdb.d
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
      MYSQL_DATABASE: ${DB_DATABASE}_staging
      MYSQL_USER: ${DB_USERNAME}
      MYSQL_PASSWORD: ${DB_PASSWORD}
    networks:
      - staging-network
    restart: unless-stopped
    command: --default-authentication-plugin=mysql_native_password

  # Redis Cache
  redis-staging:
    image: redis:alpine
    container_name: redis-staging
    ports:
      - "6380:6379"  # Port berbeda dari production
    volumes:
      - redis-staging-data:/data
    networks:
      - staging-network
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}

volumes:
  mysql-staging-data:
  redis-staging-data:

networks:
  staging-network:
    driver: bridge
