name: Deploy to VPS aaPanel

on:
  push:
    branches: [ master ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'vps'
        type: choice
        options:
          - vps
          - staging

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.1'
        extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, dom, filter, gd, json, pdo, mysql, mysqli, curl, zip, fileinfo
        tools: composer:v2
        coverage: none
    
    - name: Cache Composer packages
      id: composer-cache
      uses: actions/cache@v3
      with:
        path: vendor
        key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-php-
    
    - name: Install Dependencies
      run: composer install --prefer-dist --no-progress --optimize-autoloader
    
    - name: Copy .env for testing
      run: |
        cp .env.example .env
        echo "CI_ENVIRONMENT = testing" >> .env
    
    - name: Run Tests
      run: vendor/bin/phpunit

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Security Check
      run: |
        # Check for sensitive data in repository
        echo "Checking for sensitive data..."
        if grep -r "password.*=" . --exclude-dir=vendor --exclude-dir=.git | grep -v ".template" | grep -v ".example"; then
          echo "❌ Found potential sensitive data in repository!"
          exit 1
        fi
        echo "✅ Security check passed"

  deploy-vps:
    name: Deploy to VPS aaPanel
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.ref == 'refs/heads/master'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VPS_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts
      
      - name: Create secure environment file
        run: |
          # Create environment file dengan values dari secrets
          cat > .env.production << EOF
          DB_HOST=mysql
          DB_PORT=3306
          DB_DATABASE=demo_db
          DB_USERNAME=demo_user
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}
          
          REDIS_HOST=redis
          REDIS_PORT=6379
          REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}
          
          APP_URL=${{ secrets.APP_URL }}
          CI_ENVIRONMENT=production
          APP_FORCE_GLOBAL_SECURE_REQUESTS=true
          
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          JWT_ALGORITHM=HS256
          JWT_EXPIRED=3600
          ENCRYPTION_KEY=${{ secrets.ENCRYPTION_KEY }}
          
          CORS_ALLOWED_ORIGINS=https://demo.enampuluhenam.web.id,https://enampuluhenam.web.id
          CORS_ALLOWED_METHODS=GET,POST,PUT,DELETE,OPTIONS
          CORS_ALLOWED_HEADERS=Content-Type,Authorization,X-Requested-With
          
          LOG_LEVEL=error
          LOG_HANDLERS=file
          
          RATE_LIMIT_ENABLED=true
          RATE_LIMIT_REQUESTS=100
          RATE_LIMIT_WINDOW=3600
          
          CLOUDFLARE_TUNNEL=true
          CLOUDFLARE_DOMAIN=demo.enampuluhenam.web.id
          CLOUDFLARE_PORT=8081
          EOF
      
      - name: Deploy to VPS
        run: |
          # Copy files ke VPS
          scp -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no -r . ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }}:/www/wwwroot/demo.enampuluhenam.web.id/
          
          # Copy environment file
          scp -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no .env.production ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }}:/www/wwwroot/demo.enampuluhenam.web.id/.env
          
          # Execute deployment script
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }} << 'EOF'
            cd /www/wwwroot/demo.enampuluhenam.web.id
            chmod +x scripts/deploy-vps.sh
            ./scripts/deploy-vps.sh
          EOF
      
      - name: Verify deployment
        run: |
          # Wait for deployment to complete
          sleep 30
          
          # Test deployment
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }} << 'EOF'
            cd /www/wwwroot/demo.enampuluhenam.web.id
            
            # Check containers
            docker-compose -f docker-compose.vps.yml ps
            
            # Test local access
            curl -f http://localhost:8081/health || echo "Health check failed"
            
            # Show logs if failed
            if ! curl -f http://localhost:8081/health; then
              echo "=== Nginx Logs ==="
              docker logs ci4_api_jwt_nginx --tail 20
              echo "=== App Logs ==="
              docker logs ci4_api_jwt_app --tail 20
            fi
          EOF
      
      - name: Notify deployment status
        if: always()
        run: |
          if [ ${{ job.status }} == 'success' ]; then
            echo "✅ Deployment successful!"
            echo "🌐 Application available at: https://demo.enampuluhenam.web.id"
          else
            echo "❌ Deployment failed!"
          fi
