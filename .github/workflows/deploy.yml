# CI/CD Pipeline untuk Deploy ke VPS
name: Deploy to VPS

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master ]

jobs:
  # Job 1: Testing di GitHub Actions (lightweight)
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.1'
        extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, dom, filter, gd, iconv, json, mbstring, pdo
    
    - name: Copy .env
      run: php -r "file_exists('.env') || copy('.env.example', '.env');"
    
    - name: Install Dependencies
      run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist
    
    - name: Generate key
      run: php spark key:generate
      
    - name: Directory Permissions
      run: chmod -R 755 writable/
      
    - name: Create Database
      run: |
        mkdir -p database
        touch database/database.sqlite
        
    - name: Execute tests (Unit and Feature tests) via PHPUnit
      env:
        DB_CONNECTION: sqlite
        DB_DATABASE: database/database.sqlite
      run: vendor/bin/phpunit

  # Job 2: Deploy ke VPS setelah test berhasil
  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop'
    
    steps:
    - name: Deploy to VPS
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        key: ${{ secrets.VPS_SSH_KEY }}
        script: |
          # Tentukan environment berdasarkan branch
          if [ "${{ github.ref }}" = "refs/heads/master" ]; then
            ENV="production"
          else
            ENV="staging"
          fi
          
          echo "Deploying to $ENV environment..."
          
          # Masuk ke direktori deployment
          cd /var/www/$ENV/ci4-api-jwt || exit 1
          
          # Backup database jika production
          if [ "$ENV" = "production" ]; then
            echo "Creating database backup..."
            docker exec mysql-$ENV mysqldump -u root -p$MYSQL_ROOT_PASSWORD ci4_api_jwt > backup_$(date +%Y%m%d_%H%M%S).sql
          fi
          
          # Git pull latest changes
          echo "Pulling latest changes..."
          git pull origin ${{ github.ref_name }}
          
          # Build dan deploy dengan Docker
          echo "Building Docker containers..."
          docker-compose -f docker-compose.$ENV.yml down
          docker-compose -f docker-compose.$ENV.yml build --no-cache
          docker-compose -f docker-compose.$ENV.yml up -d
          
          # Tunggu container siap
          sleep 10
          
          # Install/Update dependencies
          echo "Installing dependencies..."
          docker-compose -f docker-compose.$ENV.yml exec -T php-fpm composer install --optimize-autoloader --no-dev
          
          # Database migrations
          echo "Running database migrations..."
          docker-compose -f docker-compose.$ENV.yml exec -T php-fpm php spark migrate
          
          # Clear cache
          echo "Clearing cache..."
          docker-compose -f docker-compose.$ENV.yml exec -T php-fpm php spark cache:clear
          
          echo "Deployment to $ENV completed successfully!"
