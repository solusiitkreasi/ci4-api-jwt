# CI/CD Pipeline untuk Deploy ke VPS
name: Deploy to VPS

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master ]

jobs:
  # Job 1: Testing di GitHub Actions (lightweight)
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.1'
        extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, dom, filter, gd, json, pdo, mysql, mysqli, curl, zip, fileinfo
        tools: composer:v2
        coverage: none
    
    - name: Validate composer files
      run: composer validate --strict
    
    - name: Cache Composer packages
      id: composer-cache
      uses: actions/cache@v3
      with:
        path: vendor
        key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-php-
    
    - name: Install Dependencies
      run: composer install --prefer-dist --no-progress --no-suggest --no-interaction --optimize-autoloader
    
    - name: Copy .env for testing
      run: |
        cp .env.example .env
        echo "CI_ENVIRONMENT = testing" >> .env
        echo "database.tests.hostname = localhost" >> .env
        echo "database.tests.database = :memory:" >> .env
        echo "database.tests.username = " >> .env
        echo "database.tests.password = " >> .env
        echo "database.tests.DBDriver = SQLite3" >> .env
        echo "database.tests.DBPrefix = " >> .env
        echo "database.tests.port = 3306" >> .env
    
    - name: Generate application key
      run: php spark key:generate
      
    - name: Directory Permissions
      run: |
        chmod -R 777 writable/
        chmod -R 755 public/
      
    - name: Run Database Migrations
      run: php spark migrate --all
        
    - name: Execute tests (Unit and Feature tests) via PHPUnit
      run: |
        if [ -f phpunit.xml.dist ]; then
          vendor/bin/phpunit --configuration phpunit.xml.dist --coverage-text --colors=never
        else
          echo "PHPUnit configuration not found, skipping tests"
        fi

  # Job 2: Deploy ke VPS setelah test berhasil
  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop'
    
    steps:
    - name: Deploy to VPS
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        key: ${{ secrets.VPS_SSH_KEY }}
        script: |
          # Tentukan environment berdasarkan branch
          if [ "${{ github.ref }}" = "refs/heads/master" ]; then
            ENV="production"
          else
            ENV="staging"
          fi
          
          echo "Deploying to $ENV environment..."
          
          # Masuk ke direktori deployment
          cd /var/www/$ENV/ci4-api-jwt || exit 1
          
          # Backup database jika production
          if [ "$ENV" = "production" ]; then
            echo "Creating database backup..."
            docker exec mysql-$ENV mysqldump -u root -p$MYSQL_ROOT_PASSWORD ci4_api_jwt > backup_$(date +%Y%m%d_%H%M%S).sql
          fi
          
          # Git pull latest changes
          echo "Pulling latest changes..."
          git pull origin ${{ github.ref_name }}
          
          # Build dan deploy dengan Docker
          echo "Building Docker containers..."
          docker-compose -f docker-compose.$ENV.yml down
          docker-compose -f docker-compose.$ENV.yml build --no-cache
          docker-compose -f docker-compose.$ENV.yml up -d
          
          # Tunggu container siap
          sleep 10
          
          # Install/Update dependencies
          echo "Installing dependencies..."
          docker-compose -f docker-compose.$ENV.yml exec -T php-fpm composer install --optimize-autoloader --no-dev
          
          # Database migrations
          echo "Running database migrations..."
          docker-compose -f docker-compose.$ENV.yml exec -T php-fpm php spark migrate
          
          # Clear cache
          echo "Clearing cache..."
          docker-compose -f docker-compose.$ENV.yml exec -T php-fpm php spark cache:clear
          
          echo "Deployment to $ENV completed successfully!"

  # Job 3: Deploy ke Demo VPS (aaPanel environment)
  deploy-demo:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    
    steps:
    - name: Deploy to Demo VPS
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.DEMO_VPS_HOST }}
        username: ${{ secrets.DEMO_VPS_USERNAME }}
        key: ${{ secrets.DEMO_VPS_SSH_KEY }}
        script: |
          echo "ðŸš€ Deploying to Demo VPS with aaPanel..."
          
          # Download and run deployment script
          curl -sSL https://raw.githubusercontent.com/solusiitkreasi/ci4-api-jwt/master/scripts/deploy-demo-vps.sh -o deploy-demo.sh
          chmod +x deploy-demo.sh
          ./deploy-demo.sh deploy
          
          echo "âœ… Demo deployment completed!"
          echo "ðŸ”— Access: https://demo.enampuluhenam.web.id"
